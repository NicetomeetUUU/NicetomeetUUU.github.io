<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webserver轻量级服务器 on QJJ-笔记</title>
    <link>https://nicetomeetuuu.github.io/tags/webserver%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
    <description>Recent content in webserver轻量级服务器 on QJJ-笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nicetomeetuuu.github.io/tags/webserver%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程池在webserver中的实现</title>
      <link>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%83%A8%E5%88%86/</guid>
      <description>1. 线程池总览 2. 代码详解 2.1 线程池对象可直接调用的成员函数包括append和append-p： 2.2 线程池对象构造与析构函数 2.3 worker函数： 3. 总结： 1. 线程池总览 实现了一个基于生产者-消费者模型的线程池： 生产者是调用append或者append-p方法的线程； 消费者是线程池中的工作线程，在run方法中循环等待任务出现； 2. 代码详解 类总览： template &amp;lt;typename T&amp;gt; class threadpool { public: /*thread_number是线程池中线程的数量，max_requests是请求队列中最多允许的、等待处理的请求的数量*/ threadpool(int actor_model, connection_pool *connPool, int thread_number = 8, int max_request = 10000); ~threadpool(); bool append(T *request, int state); bool append_p(T *request); private: /*工作线程运行的函数，它不断从工作队列中取出任务并执行之*/ static void *worker(void *arg); void run(); private: int m_thread_number; //线程池中的线程数 int m_max_requests; //请求队列中允许的最大请求数 pthread_t *m_threads; //描述线程池的数组，其大小为m_thread_number std::list&amp;lt;T *&amp;gt; m_workqueue; //请求队列 locker m_queuelocker; //保护请求队列的互斥锁 sem m_queuestat; //是否有任务需要处理 connection_pool *m_connPool; //数据库 int m_actor_model; //模型切换 }; 维护最大请求数、线程数、线程池数组（线程指针）、请求队列、互斥锁、信号量实现的待处理任务记录、数据库链接池、模型类型（Reactor or Proactor）； 2.</description>
    </item>
    <item>
      <title>日志系统在webserver中的实现</title>
      <link>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E9%83%A8%E5%88%86/</guid>
      <description>1. 日志系统总览 2. 代码实现 2.1 阻塞队列 2.2 log类 2.2.1 示例获取get_instance() 2.2.2 异步缓冲区写入flush_log_thread() 2.3 log类的共有成员函数 1. 初始化函数： 2. Log::write_log()：写日志。这个函数接受一个日志级别和一个格式化字符串，然后生成一条日志并写入日志文件或者阻塞队列。如果当前日期不是今天，或者日志文件的行数达到了最大值，那么会创建一个新的日志文件。 3. Log::flush()：刷新日志。这个函数会强制将日志缓冲区的内容写入日志文件。 3. 总结： 1. 日志系统总览 首先通过循环数组实现了一个阻塞队列 log类工作在单例模式下，单例模式详解如下： 单例模式 日志写入可以选择同步模式（线程自身调用函数打印日志）、也可以选择异步模式（将日志输入阻塞队列，待写入线程处理，阻塞队列实际上是FIFO的模式，根据线程调度先后写入，不保障顺序）； 使用互斥锁保护日志文件与日志缓冲区，保障每一时刻只有一个线程写入日志； 2. 代码实现 2.1 阻塞队列 阻塞队列每次操作数组前，通过互斥锁维护线程安全； 构造函数：阻塞队列有最大值，初始化时刻将构造一个最大值大小数组，size设为0，队头指针与队尾指针设为-1； 析构函数：析构直接释放循环数组； 就是通过首尾指针在maxsize上的遍历与size对元素总量的记录实现队列中数据的流入与流出 2.2 log类 2.2.1 示例获取get_instance() static Log *get_instance() { static Log instance; return &amp;amp;instance; } 2.2.2 异步缓冲区写入flush_log_thread() static void *flush_log_thread(void *args) { Log::get_instance()-&amp;gt;async_write_log(); } private: void *async_write_log() { string single_log; //从阻塞队列中取出一个日志string，写入文件 while (m_log_queue-&amp;gt;pop(single_log)) { m_mutex.</description>
    </item>
    <item>
      <title>各类线程锁在webserver中的实现</title>
      <link>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E7%BA%BF%E7%A8%8B%E9%94%81%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E7%BA%BF%E7%A8%8B%E9%94%81%E9%83%A8%E5%88%86/</guid>
      <description>1. 线程锁总览 简述： 2. 代码实现 2.1 sem信号量控制类 2.2 locker互斥锁类 2.3 cond条件变量设置 3. 总结 1. 线程锁总览 使用 信号量、互斥量、条件变量 实现线程锁 封装为类，在超出作用域可以自动析构，保证线程安全 简述： 互斥锁（Mutex）：主要用于保护共享资源，防止多个线程同时访问。一个线程在访问共享资源前需要获取互斥锁，访问结束后释放互斥锁。如果其他线程在这个时候也试图获取互斥锁，它会被阻塞直到互斥锁被释放。
信号量（Semaphore）：主要用于限制对共享资源的访问数量。信号量内部维护了一个计数器，线程在访问共享资源前需要调用wait（或P）操作，访问结束后调用post（或V）操作。如果计数器的值为0，wait操作会阻塞线程直到计数器的值大于0。
条件变量（Condition Variable）：主要用于线程间的条件同步。线程可以在条件不满足时调用wait操作被阻塞，其他线程在条件满足后调用signal或broadcast操作唤醒被阻塞的线程。条件变量通常和互斥锁一起使用，互斥锁用于保护条件的状态，条件变量用于等待和通知条件的改变。
条件变量和信号量之间的区别： 条件变量更适合用于&amp;quot;等待某个条件成立&amp;quot;的场景，而信号量更适合用于&amp;quot;限制对共享资源的并发访问数量&amp;quot;的场景
2. 代码实现 2.1 sem信号量控制类 构造函数析构函数没得说 wait函数用来等待信号量，当信号量值大于0，sem_wait立即返回0，否则返回非0值； post函数释放资源，使信号量增加，并且唤醒等待中的进程； class sem { public: sem() { if (sem_init(&amp;amp;m_sem, 0, 0) != 0) { throw std::exception(); } } sem(int num) { if (sem_init(&amp;amp;m_sem, 0, num) != 0) { throw std::exception(); } } ~sem() { sem_destroy(&amp;amp;m_sem); } bool wait() { return sem_wait(&amp;amp;m_sem) == 0; } bool post() { return sem_post(&amp;amp;m_sem) == 0; } private: sem_t m_sem; }; 2.</description>
    </item>
    <item>
      <title>项目总览</title>
      <link>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E9%A1%B9%E7%9B%AE%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sun, 17 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E9%A1%B9%E7%9B%AE%E6%80%BB%E8%A7%88/</guid>
      <description>项目总览 webserver项目学习 本篇记录webserver项目代码与关键点实现 fork原作者代码并拉取到本地 参考的仓库代码:https://github.com/qinguoyi/TinyWebServer
相当经典的C++项目
具体操作详见
Git使用教程
主要的工作流程： 1. 通过server类集成各部分的功能 包括：日志写入、sql链接池、线程池、设置触发模式、事件监听与循环执行； 1.1 log_write函数 通过LOG类单例初始化，异步写入、同步写入两种模式； 1.2 sql_pool()函数 设定单例模式工作的数据库连接池，并初始化数据库信息、用户名信息与端口信息； void WebServer::sql_pool() { //初始化数据库连接池 m_connPool = connection_pool::GetInstance(); m_connPool-&amp;gt;init(&amp;#34;localhost&amp;#34;, m_user, m_passWord, m_databaseName, 3306, m_sql_num, m_close_log); //初始化数据库读取表 users-&amp;gt;initmysql_result(m_connPool); } 1.3 thread_pool()函数 代码如下： #include &amp;#34;config.h&amp;#34; #include &amp;lt;yaml-cpp/yaml.h&amp;gt; int main(int argc, char *argv[]) { //需要修改的数据库信息,登录名,密码,库名 YAML::Node sql_config = YAML::LoadFile(&amp;#34;./database_info/database_info.yaml&amp;#34;); string user = sql_config[&amp;#34;user&amp;#34;].as&amp;lt;string&amp;gt;(); string passwd = sql_config[&amp;#34;passwd&amp;#34;].as&amp;lt;string&amp;gt;(); string databasename = sql_config[&amp;#34;databasename&amp;#34;].as&amp;lt;string&amp;gt;(); //命令行解析 Config config; config.parse_arg(argc, argv); WebServer server; //初始化 server.</description>
    </item>
    <item>
      <title>mysql与webserver开发环境配置</title>
      <link>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://nicetomeetuuu.github.io/posts/server%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%A1%BE/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>mysql数据库环境配置 1. 环境安装与配置(ubuntu 20.04 x86架构) 2. 运行配置 3. 卸载 4. 打包成docker镜像方便部署 5. 需要安装cpp相关的lib才能调用mysql的头文件： 1. 环境安装与配置(ubuntu 20.04 x86架构) 参考链接: https://ubuntu.com/server/docs/databases-mysql
先安装mysql-server: sudo apt-get install mysql-server
安装完毕后, server将立即启动, 可以通过service查看
sudo service mysql status&amp;#39; #输出如下 ● mysql.service - MySQL Community Server Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset&amp;gt; Active: active (running) since Wed 2024-03-06 16:01:23 CST; 1min 4s ago Main PID: 166010 (mysqld) Status: &amp;#34;Server is operational&amp;#34; Tasks: 37 (limit: 28653) Memory: 364.6M CGroup: /system.</description>
    </item>
  </channel>
</rss>
